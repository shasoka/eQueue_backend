"""–ú–æ–¥—É–ª—å, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""

from contextlib import asynccontextmanager
from typing import Any, AsyncGenerator

from fastapi import FastAPI, Request
from fastapi.responses import ORJSONResponse
from fastapi.templating import Jinja2Templates

from api import router as api_router
from core.exceptions import register_exceptions_handlers
from core.middlewares import register_middlewares
from core.models import db_helper


@asynccontextmanager
async def lifespan(_app: FastAPI) -> AsyncGenerator[Any, Any]:
    """
    –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã.
    """

    # –ù–∞ __aenter__ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
    # –ü–æ—Å–ª–µ __aenter__ yield
    yield
    # –ù–∞ __aexit__ dispose
    await db_helper.dispose()


def build_fastapi_app() -> FastAPI:
    """
    –§—É–Ω–∫—Ü–∏—è, —Å–æ–±–∏—Ä–∞—é—â–∞—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    –ó–¥–µ—Å—å –∫ –æ–±—ä–µ–∫—Ç—É FastAPI –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —Ä–æ—É—Ç–µ—Ä—ã, –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π,
    –º–∏–¥–¥–ª–≤–∞—Ä—ã –∏ –±–∏–Ω–¥—è—Ç—Å—è —à–∞–±–ª–æ–Ω—ã.

    :return: —Å–æ–±—Ä–∞–Ω–Ω–æ–µ FastAPI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    """

    app = FastAPI(
        default_response_class=ORJSONResponse,
        lifespan=lifespan,
        title="eQueue API",
        summary="–®–µ–Ω–±–µ—Ä–≥ –ê—Ä–∫–∞–¥–∏–π –ê–ª–µ–∫—Å–µ–µ–≤–∏—á –ø—ã—Ç–∞–µ—Ç—Å—è –≤ backend...",
        description="–°–µ—Ä–≤–µ—Ä–Ω–∞—è —á–∞—Å—Ç—å **eQueue**. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å ü§ù"
        "\n\n[GitHub‚ûö](https://github.com/shasoka/eQueue_backend)",
        version="1.0.0",
        swagger_ui_parameters={
            "syntaxHighlight": {
                "theme": "obsidian",
            }
        },
        redoc_url=None,
    )

    app.include_router(api_router)

    register_exceptions_handlers(app)

    register_middlewares(app)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è websocket
    templates = Jinja2Templates(directory="templates")

    @app.get("/", include_in_schema=False)
    def get(request: Request):
        return templates.TemplateResponse(
            request=request,
            name="ws_test_client.html",
        )

    return app
